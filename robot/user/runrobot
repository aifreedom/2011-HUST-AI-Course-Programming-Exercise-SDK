#!/usr/bin/python

# Huazhong University of Science and Technology 
# 2011 AI Course Programming Exercise SDK
# Author: Song Xie<mail@xiesong.me>
# Date: October 20, 2011
#    
# This file is part of HUST AI Course Programming Exercise SKD.
#
# HUST AI Course Programming Exercise SKD is free software: you can
# redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
# HUST AI Course Programming Exercise SKD is distributed in the hope
# that it will be useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with HUST AI Course Programming Exercise SKD. If not, see
# <http://www.gnu.org/licenses/>.

from subprocess import Popen, PIPE, STDOUT
import sys
import datetime
import os.path

def translate(tile):
    if tile == '#':
        return False
    elif tile == '.':
        return True
    else:
        raise ValueError

def readMap(mapfile):
    f = open(mapfile, 'r')
    H, W = [int(i) for i in f.readline().strip().split(' ')]
    startX, startY = [int(i)-1 for i in f.readline().strip().split(' ')]

    m = []
    for i in range(H):
        line = f.readline().strip()
        if len(line) != W:
            raise ValueError
        m.append([translate(t) for t in line])

    if m[startX][startY] != True:
        raise ValueError

    return m, (startX, startY)

def getMapState(m, x, y):
    if x == 0 or x == len(m)-1 or y == 0 or y == len(m[0])-1:
        raise Exception('Unknown error. Please contact mail@xiesong.me')

    return ''.join(('1' if t else '0' for t in (m[x-1][y-1], m[x-1][y], m[x-1][y+1], m[x][y+1], m[x+1][y+1], m[x+1][y], m[x+1][y-1], m[x][y-1])))
    
def valid(m, x, y):
    return x >= 0 and x < len(m) and y >= 0 and y < len(m[0]) and m[x][y]

def printMap(out, m, startP):
    x, y = startP
    out.write('%d %d\n' % (len(m), len(m[0])))
    out.write('%d %d\n' % (x+1, y+1))
    for line in m:
        out.write(''.join(('.' if t==True else '#' for t in line)) + '\n')
    

def runRobot(robot, m, startP, totalStep):
    debug = False
    
    maxUserDataLen = 10000
    totalStep = int(totalStep)
    now = datetime.datetime.now()
    robot = os.path.realpath(robot)
    x, y = startP
    userData = ''
    buffer = ''
    
    # for step in range(5 * (len(m) + len(m[0]))):
    for step in range(totalStep):
        if debug:
            print x, y, robot, getMapState(m, x, y) + '\n' + userData + '\n'
            pass
        
        p = Popen([robot], stdin=PIPE, stdout=PIPE)
        try:
            p.stdin.write(getMapState(m, x, y) + '\n' + userData + '\n')
            p.stdin.flush()
        except IOError:
            pass
        # p.wait()
        output = p.stdout.readline().strip()
        userData = p.stdout.readline().rstrip()
        
        if output == 'N':
            newx = x - 1
            newy = y
        elif output == 'S':
            newx = x + 1
            newy = y
        elif output == 'W':
            newx = x
            newy = y - 1
        elif output == 'E':
            newx = x
            newy = y + 1
        else:
            raise ValueError

        replay.write(output+'\n')
        replay.write(userData+'\n')
        
        if valid(m, newx, newy):
            x, y = newx, newy
        
    
    replay.close()
    
def run(robot, mapfile, step):
    try:
        m, (startX, startY) = readMap(mapfile)
    except IOError:
        print 'runrobot: Error! Mapfile "%s" does not exist!' % mapfile
        sys.exit()
    except ValueError:
        print 'runrobot: Error! Mapfile "%s" is not a valid mapfile!' % mapfile
        sys.exit()

    try:
        totalStep = int(step)
    except:
        print 'runrobot: Error! "%s" is not a valid integer for step!' % step
        sys.exit()

    try:
        runRobot(robot, m, (startX, startY), totalStep)
    except ValueError:
        print 'runrobot: Error! Wrong output from robot.'
        sys.exit()

if __name__ == '__main__':
    if len(sys.argv) != 4:
        print 'runrobot: use "%s robot mapfile step" to run your robot' % (sys.argv[0])
    else:
        try:
            run(sys.argv[1], sys.argv[2], sys.argv[3])
        except SystemExit:
            pass
        except:
            print "Unexpected error:", sys.exc_info()[0]
            raise 

